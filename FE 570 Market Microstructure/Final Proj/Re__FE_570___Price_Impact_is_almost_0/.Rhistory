length(tqdata_iex)
'2022-03-01 10:00:00::2022-03-01 15:00:00'
'2022-03-01 10:00:00::2022-03-01 15:00:00'+1
s = '2022-03-01 10:00:00::2022-03-01 15:00:00'
s[1]
s[1][1]
s
adf
unique(tqdata$EX)
# Libraries
library(xts)
library(highfrequency)
library(quantmod)
library(stats)
Sys.setenv(TZ = "EST")  # dataset is timestamped in GMT
options(digits.secs=3)
# Load Data
load("taqdata_KO_20220301EX.RData")
# Filter trades only in Exchange: ADF
tqdata_adf = tqdata[tqdata$EX == "ADF"]
tqdata_bat = tqdata[tqdata$EX == "BAT"]
tqdata_iex = tqdata[tqdata$EX == "IEX"]
tqdata_nys = tqdata[tqdata$EX == "NYS"]
tqdata_dex = tqdata[tqdata$EX == "DEX"]
tqdata_mmx = tqdata[tqdata$EX == "MMX"]
tqdata_pse = tqdata[tqdata$EX == "PSE"]
tqdata_thm = tqdata[tqdata$EX == "THM"]
tqdata_dea = tqdata[tqdata$EX == "DEA"]
tqdata_bos = tqdata[tqdata$EX == "BOS"]
tqdata_ase = tqdata[tqdata$EX == "ASE"]
tqdata_bty = tqdata[tqdata$EX == "BTY"]
tqdata_xph = tqdata[tqdata$EX == "XPH"]
tqdata_cin = tqdata[tqdata$EX == "CIN"]
tqdata_mpe = tqdata[tqdata$EX == "MPE"]
tqdata_mid = tqdata[tqdata$EX == "MID"]
time.subset = '2022-03-01 10:00:00::2022-03-01 15:00:00'
market.impact(tqdata = tqdata_adf, sample_times = time.subset)
time.subset = '2022-03-01 10:00:00::2022-03-01 15:00:00'
market.impact(tqdata = tqdata_ase, sample_times = time.subset)
unique(tqdata$EX)
tqdata[tqdata$EX == unique(tqdata$EX)]
unique(tqdata$EX)
# List of exchanges
exchanges = unique(tqdata$EX)
#market.impact(tqdata = tqdata_ase, sample_times = time.subset)
time.subset = '2022-03-01 10:00:00::2022-03-01 15:00:00'
for(exchange in exchanges){
print(exchange)
}
#market.impact(tqdata = tqdata_ase, sample_times = time.subset)
time.subset = '2022-03-01 10:00:00::2022-03-01 15:00:00'
for(exchange in exchanges){
print(market.impact(tqdata = tqdata[tqdata$EX == exchange], sample_times = time.subset))
}
time.subset = '2022-03-01 10:00:00::2022-03-01 15:00:00'
price_impact_ex = c()
for(exchange in exchanges){
price_impact_ex = c(price_impact_ex, market.impact(tqdata = tqdata[tqdata$EX == exchange], sample_times = time.subset))
}
price_impact_ex
plot(exchange, price_impact_ex)
exchange
plot(exchanges, price_impact_ex)
hist(exchanges, price_impact_ex)
plot(exchanges, price_impact_ex)
# Libraries
library(xts)
library(highfrequency)
library(quantmod)
library(stats)
library(ggplot2)
Sys.setenv(TZ = "EST")  # dataset is timestamped in GMT
options(digits.secs=3)
# Load Data
load("taqdata_KO_20220301EX.RData")
# List of exchanges
exchanges = unique(tqdata$EX)
# Filter trades only in Exchange: ADF
tqdata_adf = tqdata[tqdata$EX == "ADF"]
tqdata_bat = tqdata[tqdata$EX == "BAT"]
tqdata_iex = tqdata[tqdata$EX == "IEX"]
tqdata_nys = tqdata[tqdata$EX == "NYS"]
tqdata_dex = tqdata[tqdata$EX == "DEX"]
tqdata_mmx = tqdata[tqdata$EX == "MMX"]
tqdata_pse = tqdata[tqdata$EX == "PSE"]
tqdata_thm = tqdata[tqdata$EX == "THM"]
tqdata_dea = tqdata[tqdata$EX == "DEA"]
tqdata_bos = tqdata[tqdata$EX == "BOS"]
tqdata_ase = tqdata[tqdata$EX == "ASE"]
tqdata_bty = tqdata[tqdata$EX == "BTY"]
tqdata_xph = tqdata[tqdata$EX == "XPH"]
tqdata_cin = tqdata[tqdata$EX == "CIN"]
tqdata_mpe = tqdata[tqdata$EX == "MPE"]
tqdata_mid = tqdata[tqdata$EX == "MID"]
market.impact <- function(tqdata, sample_times){
sampledata <- sample_times
tqdata1hr <- tqdata[sampledata]
# calculate trade signs & signed trade volumes
tradeSigns <- getTradeDirection(tqdata1hr)
signed.x <- as.numeric(tqdata1hr$SIZE)*tradeSigns
signed.x <- signed.x[1:(length(signed.x)-1)] # trim to same size as dm
# calculate bids, mids, changes in mid prices & trade prices
prices <- as.numeric(tqdata1hr$PRICE)
asks <- as.numeric(tqdata1hr$OFR)
bids <- as.numeric(tqdata1hr$BID)
mids <- 0.5*bids + 0.5*asks
dm <- diff(mids)
dp <- diff(prices)
######################################################
# calibrate the Glosten-Harris model (Roll + price impact)
# p(t) = m(t) + c*d(t) + lambda*x(t)
# m(t) = m(t-1) + lambda*x(t-1) + u(t)
####################################################
# Find Lambda
# m(t) = m(t-1) + lambda*x(t-1) + u(t)
n <- length(signed.x)
dm.lag <- dm
(fitGlHarris <- lm(dm.lag ~ signed.x, subset=(abs(signed.x)>100)&abs(signed.x)<10000))
lambda <- fitGlHarris$coeff[2]
return(lambda)
}
ggplot(data.frame(exchanges, price_impact_ex))
data.frame(exchanges, price_impact_ex)
ggplot(data.frame(exchanges, price_impact_ex), aes(x=exchanges, y=price_impact_ex)) + geom_bar(stat = "identity")
time.subset0 = '2022-03-01 10:00:00::2022-03-01 11:00:00'
time.subset1 = '2022-03-01 11:00:00::2022-03-01 12:00:00'
time.subset2 = '2022-03-01 12:00:00::2022-03-01 13:00:00'
time.subset3 = '2022-03-01 13:00:00::2022-03-01 14:00:00'
time.subset4 = '2022-03-01 14:00:00::2022-03-01 15:00:00'
time.subset5 = '2022-03-01 15:00:00::2022-03-01 16:00:00'
time.subsets = c(time.subset0, time.subset1, time.subset2, time.subset3, time.subset4, time.subset5)
price_impact_ex = c()
for(exchange in exchanges){
price_impact_ex = c(price_impact_ex, market.impact(tqdata = tqdata[tqdata$EX == exchange], sample_times = time.subset))
}
price_impact_ex
ggplot(data.frame(exchanges, price_impact_ex), aes(x=exchanges, y=price_impact_ex)) + geom_bar(stat = "identity")
price_impact_time = c()
for(time in time.subsets){
price_impact_time = c(price_impact_time, market.impact(tqdata = tqdata[tqdata$EX == "NYS"], sample_times = time))
}
price_impact_time
#ggplot(data.frame(exchanges, price_impact_ex), aes(x=exchanges, y=price_impact_ex)) + geom_bar(stat = "identity")
#ggplot(data.frame(exchanges, price_impact_ex), aes(x=exchanges, y=price_impact_ex)) + geom_bar(stat = "identity")
plot(price_impact_time)
time.subset0 = '2022-03-01 10:00:00::2022-03-01 11:00:00'
time.subset1 = '2022-03-01 11:00:00::2022-03-01 12:00:00'
time.subset2 = '2022-03-01 12:00:00::2022-03-01 13:00:00'
time.subset3 = '2022-03-01 13:00:00::2022-03-01 14:00:00'
time.subset4 = '2022-03-01 14:00:00::2022-03-01 15:00:00'
time.subset5 = '2022-03-01 15:00:00::2022-03-01 16:00:00'
time.subsets = c(time.subset0, time.subset1, time.subset2, time.subset3, time.subset4, time.subset5)
time.subsets = c(
'2022-03-01 10:00:00::2022-03-01 10:30:00',
'2022-03-01 10:30:00::2022-03-01 11:00:00',
'2022-03-01 11:00:00::2022-03-01 11:30:00',
'2022-03-01 11:30:00::2022-03-01 12:00:00',
'2022-03-01 12:00:00::2022-03-01 12:30:00',
'2022-03-01 12:30:00::2022-03-01 13:00:00',
'2022-03-01 13:00:00::2022-03-01 13:30:00',
'2022-03-01 13:30:00::2022-03-01 14:00:00',
'2022-03-01 14:00:00::2022-03-01 14:30:00',
'2022-03-01 14:30:00::2022-03-01 15:00:00',
'2022-03-01 15:00:00::2022-03-01 15:30:00',
'2022-03-01 15:30:00::2022-03-01 16:00:00'
)
price_impact_ex = c()
for(exchange in exchanges){
price_impact_ex = c(price_impact_ex, market.impact(tqdata = tqdata[tqdata$EX == exchange], sample_times = time.subset))
}
price_impact_ex
ggplot(data.frame(exchanges, price_impact_ex), aes(x=exchanges, y=price_impact_ex)) + geom_bar(stat = "identity")
price_impact_time = c()
for(time in time.subsets){
price_impact_time = c(price_impact_time, market.impact(tqdata = tqdata[tqdata$EX == "NYS"], sample_times = time))
}
price_impact_time
#ggplot(data.frame(exchanges, price_impact_ex), aes(x=exchanges, y=price_impact_ex)) + geom_bar(stat = "identity")
plot(price_impact_time)
#ggplot(data.frame(exchanges, price_impact_ex), aes(x=exchanges, y=price_impact_ex)) + geom_bar(stat = "identity")
line(price_impact_time)
#ggplot(data.frame(exchanges, price_impact_ex), aes(x=exchanges, y=price_impact_ex)) + geom_bar(stat = "identity")
plot(price_impact_time)
#ggplot(data.frame(exchanges, price_impact_ex), aes(x=exchanges, y=price_impact_ex)) + geom_bar(stat = "identity")
#plot(price_impact_time)
ggplot(price_impact_time)
#ggplot(data.frame(exchanges, price_impact_ex), aes(x=exchanges, y=price_impact_ex)) + geom_bar(stat = "identity")
#plot(price_impact_time)
ggplot(data.frame(price_impact_time))
#ggplot(data.frame(exchanges, price_impact_ex), aes(x=exchanges, y=price_impact_ex)) + geom_bar(stat = "identity")
plot(price_impact_time)
#ggplot(data.frame(exchanges, price_impact_ex), aes(x=exchanges, y=price_impact_ex)) + geom_bar(stat = "identity")
plot(price_impact_time, type="s")
#ggplot(data.frame(exchanges, price_impact_ex), aes(x=exchanges, y=price_impact_ex)) + geom_bar(stat = "identity")
plot(price_impact_time, type="l")
for(exchange in exchanges){
price_impact_time = c()
for(time in time.subsets){
price_impact_time = c(price_impact_time, market.impact(tqdata = tqdata[tqdata$EX == exchange], sample_times = time))
}
plot(price_impact_time, type="l")
}
length(price_impact_time)
sequence(3)
for(exchange in exchanges){
price_impact_time = c()
for(time in time.subsets){
price_impact_time = c(price_impact_time, market.impact(tqdata = tqdata[tqdata$EX == exchange], sample_times = time))
}
lines(sequence(length(price_impact_time)), price_impact_time, type="l")
}
for(exchange in exchanges){
price_impact_time = c()
for(time in time.subsets){
price_impact_time = c(price_impact_time, market.impact(tqdata = tqdata[tqdata$EX == exchange], sample_times = time))
}
plot(sequence(length(price_impact_time)), price_impact_time, type="l")
}
plot()
exchanges
for(exchange in exchanges){
price_impact_time = c()
for(time in time.subsets){
price_impact_time = c(price_impact_time, market.impact(tqdata = tqdata[tqdata$EX == exchange], sample_times = time))
}
if(exchange == "NYS"){
plot(sequence(length(price_impact_time)), price_impact_time, type="l")
} else {
lines(sequence(length(price_impact_time)), price_impact_time, type="l")
}
}
for(exchange in exchanges){
price_impact_time = c()
for(time in time.subsets){
price_impact_time = c(price_impact_time, market.impact(tqdata = tqdata[tqdata$EX == exchange], sample_times = time))
}
plot(sequence(length(price_impact_time)), price_impact_time, type="l")
}
summary(fitGlHarris)
# Libraries
library(xts)
library(highfrequency)
library(quantmod)
library(stats)
Sys.setenv(TZ = "EST")  # dataset is timestamped in GMT
options(digits.secs=3)
# Load Data
load("taqdata_KO_20220301EX.RData")
# Filter trades only in Exchange: ADF
tqdata = tqdata[tqdata$EX == "ADF"]
head(tqdata)
# keep only a subset of trading hours (2022-03-01 10am - 3pm)
sampledata <- '2022-03-01 10:00:00::2022-03-01 15:00:00'
tqdata1hr <- tqdata[sampledata]
length(tqdata$PRICE) # 11,127 trades
# calculate trade signs & signed trade volumes
tradeSigns <- getTradeDirection(tqdata1hr)
signed.x <- as.numeric(tqdata1hr$SIZE)*tradeSigns
signed.x <- signed.x[1:(length(signed.x)-1)] # trim to same size as dm
# calculate bids, mids, changes in mid prices & trade prices
prices <- as.numeric(tqdata1hr$PRICE)
asks <- as.numeric(tqdata1hr$OFR)
bids <- as.numeric(tqdata1hr$BID)
mids <- 0.5*bids + 0.5*asks
dm <- diff(mids)
dp <- diff(prices)
plot(prices, type="l", col="blue", main = "Bid and Ask Prices - No Jumps in Window")
lines(mids, type="l", col="red")
acf(tradeSigns)
acf(signed.x)
plot(signed.x, dm, pch=20,col="blue",
main="mid-price change vs trade size",
xlab="Signed size", ylab="d(mid)", xlim = c(-5000, 5000), ylim=c(-0.1,0.1))
# determine optimal lag from ccf analysis
library(stats)
dm.ts <- ts(dm)
signed.x.ts <- ts(signed.x)
# cov(dm,signed.x) =  0.4723287
# cor(dm,signed.x) = 0.06152167
# we expect that dm lags signed_x
dm.x.ccf <- ccf(signed.x.ts, dm.ts)
######################################################
# calibrate the Glosten-Harris model (Roll + price impact)
# p(t) = m(t) + c*d(t) + lambda*x(t)
# m(t) = m(t-1) + lambda*x(t-1) + u(t)
####################################################
# Find Lambda
# m(t) = m(t-1) + lambda*x(t-1) + u(t)
n <- length(signed.x)
dm.lag <- dm
(fitGlHarris <- lm(dm.lag ~ signed.x, subset=(abs(signed.x)>100)&abs(signed.x)<10000))
lambda <- fitGlHarris$coeff[2]
plot(signed.x, dm, pch=20,col="blue",
main="mid-price change vs trade size (ADF 10am-3pm)",
xlab="Signed size", ylab="d(mid)", xlim=c(-5000,5000), ylim=c(-0.05,0.05))
abline(fitGlHarris, col="red")
# lambda = 4.666e-07
# Find c
# p(t) = m(t) + c*d(t) + lambda*x(t)
ns <- length(signed.x)
priceDiff <- prices[1:ns] - mids[1:ns] - lambda*signed.x
(fitGlHarris2 <- lm(priceDiff ~ tradeSigns[1:ns]))
summary(fitGlHarris2)
summary(fitGlHarris)
# c = -1.946e-05
#s = 2*(c + lambda*|x|)
#cat("Bid-Ask Spread = ", 2*(c + lambda * abs()))
length(dt)
dt
################################################
# Price-impact regression using Eq.(5.4) in Foucault, Pagano, Roell
# dp(t) = lambda*d(t) + gamma*d(d(t)) + eps(t)
# regress dp ~ d, dd
# bid-ask spread = 2*(lambda + gamma)
dp <- diff(prices)
dt <- diff(tradeSigns)
tradeSigns_trim <- tradeSigns[1:(length(tradeSigns)-1)] # trim to same size as dt
length(dp)
length(dt)
(fitPriceImpact <- lm(dp ~ tradeSigns_trim + dt))
#Coefficients:
#    (Intercept)  tradeSigns_trim               dt
#     -2.184e-05        1.089e-03        3.333e-03
residDp <- dp + 0.0001 - 0.00298*tradeSigns_trim - 0.0077869*dt
plot(residDp, type="p", col="black", ylim=c(-0.1,0.1))
plot(dp, type="p", col="black", ylim=c(-0.1,0.1))
plot(dt, dp, pch=20,col="blue",
main="price change vs price reversal",
xlab="Signed size", ylab="d(mid)", xlim=c(-2,2), ylim=c(-0.5,0.5))
abline(fitPriceImpact, col="red")
cat("Bid-Ask Spread: ", 2*(3.333e-03 + 1.089e-03))
dt
length)dt
length(dt)
length(signed.x)
################################################
# Price-impact regression using Eq.(5.4) in Foucault, Pagano, Roell
# dp(t) = lambda*d(t) + gamma*d(d(t)) + eps(t)
# regress dp ~ d, dd
# bid-ask spread = 2*(lambda + gamma)
# Modified Foucault
# dp(t) = lambda*x(t) + gamma*d(d(t))*dx(t) + eps(t)
dp <- diff(prices)
dt <- diff(tradeSigns)
tradeSigns_trim <- tradeSigns[1:(length(tradeSigns)-1)] # trim to same size as dt
length(dp)
length(dt)
(fitPriceImpact <- lm(dp ~ tradeSigns_trim + dt))
#Coefficients:
#    (Intercept)  tradeSigns_trim               dt
#     -2.184e-05        1.089e-03        3.333e-03
residDp <- dp + 0.0001 - 0.00298*tradeSigns_trim - 0.0077869*dt
plot(residDp, type="p", col="black", ylim=c(-0.1,0.1))
plot(dp, type="p", col="black", ylim=c(-0.1,0.1))
plot(dt, signed.x, pch=20,col="blue",
main="price change vs price reversal",
xlab="Signed size", ylab="d(mid)", xlim=c(-2,2), ylim=c(-0.5,0.5))
abline(fitPriceImpact, col="red")
cat("Bid-Ask Spread: ", 2*(3.333e-03 + 1.089e-03))
################################################
# Price-impact regression using Eq.(5.4) in Foucault, Pagano, Roell
# dp(t) = lambda*d(t) + gamma*d(d(t)) + eps(t)
# regress dp ~ d, dd
# bid-ask spread = 2*(lambda + gamma)
# Modified Foucault
# dp(t) = lambda*x(t) + gamma*d(d(t))*dx(t) + eps(t)
dp <- diff(prices)
dt <- diff(tradeSigns)
tradeSigns_trim <- tradeSigns[1:(length(tradeSigns)-1)] # trim to same size as dt
length(dp)
length(dt)
(fitPriceImpact <- lm(dp ~ tradeSigns_trim + dt))
#Coefficients:
#    (Intercept)  tradeSigns_trim               dt
#     -2.184e-05        1.089e-03        3.333e-03
residDp <- dp + 0.0001 - 0.00298*tradeSigns_trim - 0.0077869*dt
plot(residDp, type="p", col="black", ylim=c(-0.1,0.1))
plot(dp, type="p", col="black", ylim=c(-0.1,0.1))
plot(signed.x, dp, pch=20,col="blue",
main="price change vs price reversal",
xlab="Signed size", ylab="d(mid)", xlim=c(-2,2), ylim=c(-0.5,0.5))
abline(fitPriceImpact, col="red")
cat("Bid-Ask Spread: ", 2*(3.333e-03 + 1.089e-03))
trade_sizes = as.numeric(tqdata1hr$SIZE)
length(trade_sizes)
length(dt)
length(dp)
length(tradeSigns_trim)
################################################
# Price-impact regression using Eq.(5.4) in Foucault, Pagano, Roell
# dp(t) = lambda*d(t) + gamma*d(d(t)) + eps(t)
# regress dp ~ d, dd
# bid-ask spread = 2*(lambda + gamma)
# Modified Foucault
# dp(t) = lambda*x(t) + gamma*d(d(t))*dx(t) + eps(t)
trade_sizes = as.numeric(tqdata1hr$SIZE)
dp <- diff(prices)
dt <- diff(tradeSigns)
tradeSigns_trim <- tradeSigns[1:(length(tradeSigns)-1)] # trim to same size as dt
length(dp)
length(dt)
(fitPriceImpact <- lm(dp ~ tradeSigns_trim*trade_sizes[-1] + dt*trade_sizes[-1]))
#Coefficients:
#    (Intercept)  tradeSigns_trim               dt
#     -2.184e-05        1.089e-03        3.333e-03
residDp <- dp + 0.0001 - 0.00298*tradeSigns_trim - 0.0077869*dt
plot(residDp, type="p", col="black", ylim=c(-0.1,0.1))
plot(dp, type="p", col="black", ylim=c(-0.1,0.1))
plot(signed.x, dp, pch=20,col="blue",
main="price change vs price reversal",
xlab="Signed size", ylab="d(mid)", xlim=c(-2,2), ylim=c(-0.5,0.5))
abline(fitPriceImpact, col="red")
cat("Bid-Ask Spread: ", 2*(3.333e-03 + 1.089e-03))
trade_sizes = as.numeric(tqdata1hr$SIZE)
dp <- diff(prices)
dt <- diff(tradeSigns)
tradeSigns_trim <- tradeSigns[1:(length(tradeSigns)-1)] # trim to same size as dt
length(dp)
length(dt)
(fitPriceImpact <- lm(dp ~ tradeSigns_trim*trade_sizes[-1] + dt*trade_sizes[-1]))
plot(signed.x, dp, pch=20,col="blue",
main="price change vs price reversal",
xlab="Signed size", ylab="d(mid)", xlim=c(-2,2), ylim=c(-0.5,0.5))
plot(signed.x, dp, pch=20,col="blue",
main="price change vs price reversal",
xlab="Signed size", ylab="d(mid)", xlim=c(-5000,5000), ylim=c(-0.5,0.5))
plot(signed.x, dp, pch=20,col="blue",
xlim=c(-5000,5000), ylim=c(-0.5,0.5))
abline(fitPriceImpact, col="red")
plot(signed.x, dp, pch=20,col="blue",
xlim=c(-5000,5000), ylim=c(-0.5,0.5))
abline(fitPriceImpact, col="red")
plot(signed.x, dp, pch=20,col="blue",
xlim=c(-5000,5000), ylim=c(-0.5,0.5))
line(fitPriceImpact, col="red")
abline(fitPriceImpact)
plot(signed.x, dp, pch=20,col="blue",
xlim=c(-5000,5000), ylim=c(-0.5,0.5))
abline(fitPriceImpact)
plot(signed.x, dp, pch=20,col="blue",
xlim=c(-5000,5000), ylim=c(-0.5,0.5))
abline(fitPriceImpact)
plot?
?
?plot
fitPriceImpact
dt*trade_sizes[-1]
signed.x1 = tradeSigns_trim*trade_sizes[-1]
signed.x2 = dt*trade_sizes[-1]
(fitPriceImpact <- lm(dp ~ signed.x1 + signed.x2))
plot(signed.x, dp, pch=20,col="blue",
xlim=c(-5000,5000), ylim=c(-0.5,0.5))
abline(fitPriceImpact)
length(dm)
(fitPriceImpact_mid <- lm(dm ~ signed.x1 + signed.x2 ))
plot(signed.x, dp, pch=20,col="blue",
xlim=c(-5000,5000), ylim=c(-0.5,0.5))
abline(fitPriceImpact)
fitPriceImpact
plot(signed.x, dm, pch=20,col="blue",
xlim=c(-5000,5000), ylim=c(-0.5,0.5))
abline(fitPriceImpact_mid)
fitPriceImpact_mid
plot(dp, type="p", col="black", ylim=c(-0.1,0.1))
plot(signed.x, dp, pch=20,col="blue",
xlim=c(-5000,5000), ylim=c(-0.5,0.5))
abline(fitPriceImpact)
plot(signed.x, dm, pch=20,col="blue",
xlim=c(-5000,5000), ylim=c(-0.5,0.5))
abline(fitPriceImpact_mid)
plot(signed.x, dp, pch=20,col="blue",
xlim=c(-5000,5000), ylim=c(-0.05,0.05))
abline(fitPriceImpact)
plot(signed.x, dm, pch=20,col="blue",
xlim=c(-5000,5000), ylim=c(-0.05,0.05))
abline(fitPriceImpact_mid)
summary(fitPriceImpact_mid)
fitPriceImpact_mid
2*(2.386e-07 + 1.911e-07)
plot(signed.x, dp, pch=20,col="blue", main = "Modified Foucault",
xlim=c(-5000,5000), ylim=c(-0.05,0.05))
abline(fitPriceImpact, col="red")
plot(signed.x, dm, pch=20,col="blue", main = "Modified Foucault",
xlim=c(-5000,5000), ylim=c(-0.05,0.05))
abline(fitPriceImpact_mid, col = "red")
plot(signed.x, dp, pch=20,col="blue", main = "Modified Foucault",
xlim=c(-5000,5000), ylim=c(-0.05,0.05))
abline(fitPriceImpact, col="red")
plot(signed.x, dm, pch=20,col="blue", main = "Modified Foucault",
xlim=c(-5000,5000), ylim=c(-0.05,0.05))
abline(fitPriceImpact_mid, col = "red")
setwd("C:/Users/sidiy/Documents/GitHub/SIT-Courses/FE 570 Market Microstructure/Final Proj/Re__FE_570___Price_Impact_is_almost_0")
# Load Data
load("taqdata_KO_20220301EX.RData")
options(digits.secs=12)
View(tqdata)
library(xts)
library(highfrequency)
library(quantmod)
library(stats)
Sys.setenv(TZ = "EST")  # dataset is timestamped in GMT
options(digits.secs=3)
# Load Data
load("taqdata_KO_20220301EX.RData")
options(digits.secs=12)
View(tqdata)
write.table(tqdata, "tqdata_new_txt")
write.table(tqdata, "tqdata_new_txt", row.names = TRUE)
write.table(tqdata, "tqdata_new.txt", row.names = TRUE)
tqdata_zoo = fortify.zoo(tqdata)
View(tqdata_zoo)
write.table(tqdata_zoo, "tqdata_new.txt", row.names = TRUE)
